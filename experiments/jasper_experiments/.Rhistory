measures_labels = c(measures_labels, more_measures_labels)
for( m in 1:length(more_measures_names)){
measures_snapshots_all[more_measures_names[m]] = as.numeric(as.character(measures_snapshots_all[[more_measures_names[m]]]))
}
measures_averages_gens_1 = list()
measures_averages_gens_2 = list()
for (met in 1:length(methods))
{
measures_aux = c()
p <- c(0.25, 0.75)
p_names <- map_chr(p, ~paste0('Q',.x*100, sep=""))
p_funs <- map(p, ~partial(quantile, probs = .x, na.rm = TRUE)) %>%
set_names(nm = p_names)
query ='select run, generation'
for (i in 1:length(measures_names))
{
query = paste(query,', avg(',measures_names[i],') as ', methods[met], '_',measures_names[i],'_mean', sep='')
query = paste(query,', median(',measures_names[i],') as ', methods[met], '_',measures_names[i],'_median', sep='')
query = paste(query,', min(',measures_names[i],') as ', methods[met], '_',measures_names[i],'_min', sep='')
query = paste(query,', max(',measures_names[i],') as ', methods[met], '_',measures_names[i],'_max', sep='')
measures_aux = c(measures_aux, measures_names[i])
}
query = paste(query,' from measures_snapshots_all
where method="', methods[met],'" group by run, generation', sep='')
inner_measures = sqldf(query)
quantiles = data.frame(measures_snapshots_all %>%
filter(method==methods[met]) %>%
group_by(run, generation) %>%
summarize_at(vars(  measures_aux), funs(!!!p_funs)) )
for (i in 1:length(measures_names)){
for(q in c('Q25', 'Q75')){
variable =  paste(measures_names[i], q, sep='_')
names(quantiles)[names(quantiles) == variable] <- paste(methods[met], '_',variable, sep='')
}
}
inner_measures = sqldf('select * from inner_measures inner join quantiles using (run, generation)')
measures_averages_gens_1[[met]] = inner_measures
inner_measures = measures_averages_gens_1[[met]]
inner_measures$generation = as.numeric(inner_measures$generation)
measures_aux = c()
query = 'select generation'
for (i in 1:length(measures_names))
{
query = paste(query,', median(', methods[met],'_',measures_names[i],'_mean) as ' , methods[met],'_',measures_names[i],'_mean_median', sep='')
query = paste(query,', median(', methods[met],'_',measures_names[i],'_median) as ', methods[met],'_',measures_names[i],'_median_median', sep='')
query = paste(query,', median(', methods[met],'_',measures_names[i],'_min) as ', methods[met],'_',measures_names[i],'_min_median', sep='')
query = paste(query,', median(', methods[met],'_',measures_names[i],'_max) as ', methods[met],'_',measures_names[i],'_max_median', sep='')
query = paste(query,', median(', methods[met],'_',measures_names[i],'_Q25) as ', methods[met],'_',measures_names[i],'_Q25_median', sep='')
query = paste(query,', median(', methods[met],'_',measures_names[i],'_Q75) as ', methods[met],'_',measures_names[i],'_Q75_median', sep='')
measures_aux = c(measures_aux, paste(methods[met],'_',measures_names[i],'_mean', sep='') )
measures_aux = c(measures_aux, paste(methods[met],'_',measures_names[i],'_median', sep='') )
measures_aux = c(measures_aux, paste(methods[met],'_',measures_names[i],'_min', sep='') )
measures_aux = c(measures_aux, paste(methods[met],'_',measures_names[i],'_max', sep='') )
measures_aux = c(measures_aux, paste(methods[met],'_',measures_names[i],'_Q25', sep='') )
measures_aux = c(measures_aux, paste(methods[met],'_',measures_names[i],'_Q75', sep='') )
}
query = paste(query,' from inner_measures group by generation', sep="")
outter_measures = sqldf(query)
quantiles = data.frame(inner_measures %>%
group_by(generation) %>%
summarize_at(vars(  measures_aux), funs(!!!p_funs)) )
measures_averages_gens_2[[met]] = sqldf('select * from outter_measures inner join quantiles using (generation)')
}
for (met in 1:length(methods))
{
if(met==1){
measures_averages_gens = measures_averages_gens_2[[1]]
}else{
measures_averages_gens = merge(measures_averages_gens, measures_averages_gens_2[[met]], all=TRUE, by = "generation")
}
}
all_na = colSums(is.na(measures_averages_gens)) == nrow(measures_averages_gens)
for (i in 1:length(measures_names))
{
#  line plots
# finding values for scaling
max_y =  0
min_y = 10000000
for(a in 1:length(aggregations)){
for(m in 1:length(methods)){
max_value = max(measures_averages_gens[paste(methods[m],'_',measures_names[i],'_', aggregations[a], '_Q75',sep='')], na.rm = TRUE)
min_value = min(measures_averages_gens[paste(methods[m],'_',measures_names[i],'_', aggregations[a], '_Q25',sep='')], na.rm = TRUE)
if(max_value > max_y){ max_y = max_value }
if(min_value < min_y){ min_y = min_value }
}
}
#if (measures_names[i] == 'absolute_size' )  {    max_y = 16}
for(a in 1:length(aggregations)){
graph <- ggplot(data=measures_averages_gens, aes(x=generation))
for(m in 1:length(methods)){
is_all_na = all_na[paste(methods[m],'_',measures_names[i],'_', aggregations[a], '_median', sep='')]
if (is_all_na == FALSE) {
graph = graph + geom_ribbon(aes_string(ymin=paste(methods[m],'_',measures_names[i],'_', aggregations[a],'_Q25',sep=''),
ymax=paste(methods[m],'_',measures_names[i],'_', aggregations[a],'_Q75',sep='') ),
fill=experiments_type_colors[m], alpha=0.2, size=0)
graph = graph + geom_line(aes_q(y = as.name(paste(methods[m],'_',measures_names[i],'_', aggregations[a], '_median', sep='')) ,
colour=paste(methods_labels[m], aggregations[a], sep='_')), size=1)
}
}
if (max_y>0) {
graph = graph + coord_cartesian(ylim = c(min_y, max_y))
}
graph = graph  +  labs(y=measures_labels[i], x="Generation", title="")
graph = graph +   scale_color_manual(values=experiments_type_colors)
graph = graph  + theme(legend.position="bottom" ,  legend.text=element_text(size=25), axis.text=element_text(size=32), axis.title=element_text(size=30),
plot.subtitle=element_text(size=30 ), plot.title=element_text(size=30 ))
ggsave(paste( output_directory,'/',measures_names[i], '_', aggregations[a], '_lines.pdf',  sep=''), graph , device='pdf', height = 10, width = 10)
# creates one box plot per measure, and one extra in case outlier removal is needeed
outliers = c('full', 'filtered')
for (out in outliers)
{
has_outliers = FALSE
for(gc in gens_box_comparisons)
{
all_final_values = data.frame()
for (met in 1:length(methods))
{
met_measures = measures_averages_gens_1[[met]]
gen_measures = sqldf(paste("select * from met_measures where generation=", gc, sep=''))
temp = data.frame( c(gen_measures[paste(methods[met],'_',measures_names[i],'_', aggregations[a], sep='')]))
colnames(temp) <- 'values'
if (out == 'filtered'){
if (!all(is.na(temp$values))){
num_rows_before = nrow(temp)
upperl <- quantile(temp$values)[4] + 1.5*IQR(temp$values)
lowerl <- quantile(temp$values)[2] - 1.5*IQR(temp$values)
temp = temp %>% filter(values <= upperl & values >= lowerl )
if (num_rows_before > nrow(temp)){
has_outliers = TRUE
}
}
}
temp$type = methods_labels[met]
all_final_values = rbind(all_final_values, temp)
}
g1 <-  ggplot(data=all_final_values, aes(x= type , y=values, color=type )) +
geom_boxplot(position = position_dodge(width=0.9),lwd=2,  outlier.size = 4) +
labs( x="Method", y=measures_labels[i], title=str_to_title(aggregations[a]))
g1 = g1 +  scale_color_manual(values=  experiments_type_colors  )
g1 = g1 + theme(legend.position="none" , text = element_text(size=50) ,
plot.title=element_text(size=50),  axis.text=element_text(size=50),
axis.title=element_text(size=55),
axis.text.x = element_text(angle = 20, hjust = 0.9),
plot.margin=margin(t = 0.5, r = 0.5, b = 0.5, l =  1.3, unit = "cm"))+
stat_summary(fun.y = mean, geom="point" ,shape = 16,  size=11)
# in this list, use the desired pairs names from methods_labels
comps = list( methods_labels )
max_y =  0
#if (measures_names[i] == 'absolute_size' )  {    max_y = 16}
if (max_y>0) {
graph = graph + coord_cartesian(ylim = c(min_y, max_y))
}
g1 = g1 + geom_signif( test="wilcox.test", size=1, textsize=18,
comparisons = comps,
map_signif_level=c() )
if (out == 'full' || (out == 'filtered' &&  has_outliers == TRUE) ){
ggsave(paste(output_directory,"/",measures_names[i],"_",gc,"_", aggregations[a],'_', out,"_boxes.pdf",sep = ""), g1, device = "pdf", height=18, width = 10)
}
}
}
}
}
methods_labels
methods
View(measures_averages_gens)
i=24
measures_names[i]
all_na = colSums(is.na(measures_averages_gens)) == nrow(measures_averages_gens)
max_y =  0
min_y = 10000000
for(a in 1:length(aggregations)){
for(m in 1:length(methods)){
max_value = max(measures_averages_gens[paste(methods[m],'_',measures_names[i],'_', aggregations[a], '_Q75',sep='')], na.rm = TRUE)
min_value = min(measures_averages_gens[paste(methods[m],'_',measures_names[i],'_', aggregations[a], '_Q25',sep='')], na.rm = TRUE)
if(max_value > max_y){ max_y = max_value }
if(min_value < min_y){ min_y = min_value }
}
}
min_y
aggregations
a=2
graph <- ggplot(data=measures_averages_gens, aes(x=generation))
for(m in 1:length(methods)){
is_all_na = all_na[paste(methods[m],'_',measures_names[i],'_', aggregations[a], '_median', sep='')]
if (is_all_na == FALSE) {
graph = graph + geom_ribbon(aes_string(ymin=paste(methods[m],'_',measures_names[i],'_', aggregations[a],'_Q25',sep=''),
ymax=paste(methods[m],'_',measures_names[i],'_', aggregations[a],'_Q75',sep='') ),
fill=experiments_type_colors[m], alpha=0.2, size=0)
graph = graph + geom_line(aes_q(y = as.name(paste(methods[m],'_',measures_names[i],'_', aggregations[a], '_median', sep='')) ,
colour=paste(methods_labels[m], aggregations[a], sep='_')), size=1)
}
}
graph
if (max_y>0) {
graph = graph + coord_cartesian(ylim = c(min_y, max_y))
}
graph = graph  +  labs(y=measures_labels[i], x="Generation", title="")
graph = graph +   scale_color_manual(values=experiments_type_colors)
graph = graph  + theme(legend.position="bottom" ,  legend.text=element_text(size=25), axis.text=element_text(size=32), axis.title=element_text(size=30),
plot.subtitle=element_text(size=30 ), plot.title=element_text(size=30 ))
graph
ggsave(paste( output_directory,'/',measures_names[i], '_', aggregations[a], '_lines.pdf',  sep=''), graph , device='pdf', height = 10, width = 10)
# creates one box plot per measure, and one extra in case outlier removal is needeed
outliers = c('full', 'filtered')
for (out in outliers)
{
has_outliers = FALSE
for(gc in gens_box_comparisons)
{
all_final_values = data.frame()
for (met in 1:length(methods))
{
met_measures = measures_averages_gens_1[[met]]
gen_measures = sqldf(paste("select * from met_measures where generation=", gc, sep=''))
temp = data.frame( c(gen_measures[paste(methods[met],'_',measures_names[i],'_', aggregations[a], sep='')]))
colnames(temp) <- 'values'
if (out == 'filtered'){
if (!all(is.na(temp$values))){
num_rows_before = nrow(temp)
upperl <- quantile(temp$values)[4] + 1.5*IQR(temp$values)
lowerl <- quantile(temp$values)[2] - 1.5*IQR(temp$values)
temp = temp %>% filter(values <= upperl & values >= lowerl )
if (num_rows_before > nrow(temp)){
has_outliers = TRUE
}
}
}
temp$type = methods_labels[met]
all_final_values = rbind(all_final_values, temp)
}
g1 <-  ggplot(data=all_final_values, aes(x= type , y=values, color=type )) +
geom_boxplot(position = position_dodge(width=0.9),lwd=2,  outlier.size = 4) +
labs( x="Method", y=measures_labels[i], title=str_to_title(aggregations[a]))
g1 = g1 +  scale_color_manual(values=  experiments_type_colors  )
g1 = g1 + theme(legend.position="none" , text = element_text(size=50) ,
plot.title=element_text(size=50),  axis.text=element_text(size=50),
axis.title=element_text(size=55),
axis.text.x = element_text(angle = 20, hjust = 0.9),
plot.margin=margin(t = 0.5, r = 0.5, b = 0.5, l =  1.3, unit = "cm"))+
stat_summary(fun.y = mean, geom="point" ,shape = 16,  size=11)
# in this list, use the desired pairs names from methods_labels
comps = list( methods_labels )
max_y =  0
#if (measures_names[i] == 'absolute_size' )  {    max_y = 16}
if (max_y>0) {
graph = graph + coord_cartesian(ylim = c(min_y, max_y))
}
g1 = g1 + geom_signif( test="wilcox.test", size=1, textsize=18,
comparisons = comps,
map_signif_level=c() )
if (out == 'full' || (out == 'filtered' &&  has_outliers == TRUE) ){
ggsave(paste(output_directory,"/",measures_names[i],"_",gc,"_", aggregations[a],'_', out,"_boxes.pdf",sep = ""), g1, device = "pdf", height=18, width = 10)
}
}
}
methods
out=1
all_final_values = data.frame()
for (met in 1:length(methods))
{
met_measures = measures_averages_gens_1[[met]]
gen_measures = sqldf(paste("select * from met_measures where generation=", gc, sep=''))
temp = data.frame( c(gen_measures[paste(methods[met],'_',measures_names[i],'_', aggregations[a], sep='')]))
colnames(temp) <- 'values'
if (out == 'filtered'){
if (!all(is.na(temp$values))){
num_rows_before = nrow(temp)
upperl <- quantile(temp$values)[4] + 1.5*IQR(temp$values)
lowerl <- quantile(temp$values)[2] - 1.5*IQR(temp$values)
temp = temp %>% filter(values <= upperl & values >= lowerl )
if (num_rows_before > nrow(temp)){
has_outliers = TRUE
}
}
}
temp$type = methods_labels[met]
all_final_values = rbind(all_final_values, temp)
}
View(met_measures)
temp = data.frame( c(gen_measures[paste(methods[met],'_',measures_names[i],'_', aggregations[a], sep='')]))
colnames(temp) <- 'values'
f (out == 'filtered'){
if (!all(is.na(temp$values))){
num_rows_before = nrow(temp)
upperl <- quantile(temp$values)[4] + 1.5*IQR(temp$values)
lowerl <- quantile(temp$values)[2] - 1.5*IQR(temp$values)
temp = temp %>% filter(values <= upperl & values >= lowerl )
if (num_rows_before > nrow(temp)){
has_outliers = TRUE
}
}
}
all_final_values = rbind(all_final_values, temp)
View(all_final_values)
# creates one box plot per measure, and one extra in case outlier removal is needeed
outliers = c('full', 'filtered')
for (out in outliers)
{
has_outliers = FALSE
for(gc in gens_box_comparisons)
{
all_final_values = data.frame()
for (met in 1:length(methods))
{
met_measures = measures_averages_gens_1[[met]]
gen_measures = sqldf(paste("select * from met_measures where generation=", gc, sep=''))
temp = data.frame( c(gen_measures[paste(methods[met],'_',measures_names[i],'_', aggregations[a], sep='')]))
colnames(temp) <- 'values'
if (out == 'filtered'){
if (!all(is.na(temp$values))){
num_rows_before = nrow(temp)
upperl <- quantile(temp$values)[4] + 1.5*IQR(temp$values)
lowerl <- quantile(temp$values)[2] - 1.5*IQR(temp$values)
temp = temp %>% filter(values <= upperl & values >= lowerl )
if (num_rows_before > nrow(temp)){
has_outliers = TRUE
}
}
}
temp$type = methods_labels[met]
all_final_values = rbind(all_final_values, temp)
}
g1 <-  ggplot(data=all_final_values, aes(x= type , y=values, color=type )) +
geom_boxplot(position = position_dodge(width=0.9),lwd=2,  outlier.size = 4) +
labs( x="Method", y=measures_labels[i], title=str_to_title(aggregations[a]))
g1 = g1 +  scale_color_manual(values=  experiments_type_colors  )
g1 = g1 + theme(legend.position="none" , text = element_text(size=50) ,
plot.title=element_text(size=50),  axis.text=element_text(size=50),
axis.title=element_text(size=55),
axis.text.x = element_text(angle = 20, hjust = 0.9),
plot.margin=margin(t = 0.5, r = 0.5, b = 0.5, l =  1.3, unit = "cm"))+
stat_summary(fun.y = mean, geom="point" ,shape = 16,  size=11)
# in this list, use the desired pairs names from methods_labels
comps = list( methods_labels )
max_y =  0
#if (measures_names[i] == 'absolute_size' )  {    max_y = 16}
if (max_y>0) {
graph = graph + coord_cartesian(ylim = c(min_y, max_y))
}
g1 = g1 + geom_signif( test="wilcox.test", size=1, textsize=18,
comparisons = comps,
map_signif_level=c() )
if (out == 'full' || (out == 'filtered' &&  has_outliers == TRUE) ){
ggsave(paste(output_directory,"/",measures_names[i],"_",gc,"_", aggregations[a],'_', out,"_boxes.pdf",sep = ""), g1, device = "pdf", height=18, width = 10)
}
}
}
out
methods
met
met_measures = measures_averages_gens_1[[met]]
gen_measures = sqldf(paste("select * from met_measures where generation=", gc, sep=''))
temp = data.frame( c(gen_measures[paste(methods[met],'_',measures_names[i],'_', aggregations[a], sep='')]))
colnames(temp) <- 'values'
if (out == 'filtered'){
if (!all(is.na(temp$values))){
num_rows_before = nrow(temp)
upperl <- quantile(temp$values)[4] + 1.5*IQR(temp$values)
lowerl <- quantile(temp$values)[2] - 1.5*IQR(temp$values)
temp = temp %>% filter(values <= upperl & values >= lowerl )
if (num_rows_before > nrow(temp)){
has_outliers = TRUE
}
}
}
all_final_values = data.frame()
for (met in 1:length(methods))
{
met_measures = measures_averages_gens_1[[met]]
gen_measures = sqldf(paste("select * from met_measures where generation=", gc, sep=''))
temp = data.frame( c(gen_measures[paste(methods[met],'_',measures_names[i],'_', aggregations[a], sep='')]))
colnames(temp) <- 'values'
if (out == 'filtered'){
if (!all(is.na(temp$values))){
num_rows_before = nrow(temp)
upperl <- quantile(temp$values)[4] + 1.5*IQR(temp$values)
lowerl <- quantile(temp$values)[2] - 1.5*IQR(temp$values)
temp = temp %>% filter(values <= upperl & values >= lowerl )
if (num_rows_before > nrow(temp)){
has_outliers = TRUE
}
}
}
temp$type = methods_labels[met]
all_final_values = rbind(all_final_values, temp)
}
all_final_values = data.frame()
met_measures = measures_averages_gens_1[[met]]
gen_measures = sqldf(paste("select * from met_measures where generation=", gc, sep=''))
temp = data.frame( c(gen_measures[paste(methods[met],'_',measures_names[i],'_', aggregations[a], sep='')]))
colnames(temp) <- 'values'
if (out == 'filtered'){
if (!all(is.na(temp$values))){
num_rows_before = nrow(temp)
upperl <- quantile(temp$values)[4] + 1.5*IQR(temp$values)
lowerl <- quantile(temp$values)[2] - 1.5*IQR(temp$values)
temp = temp %>% filter(values <= upperl & values >= lowerl )
if (num_rows_before > nrow(temp)){
has_outliers = TRUE
}
}
}
temp$type = methods_labels[met]
methods_labels[met]
temp
View(gen_measures)
gc
gens_box_comparisons = c(0, 10)
met_measures = measures_averages_gens_1[[met]]
gen_measures = sqldf(paste("select * from met_measures where generation=", gc, sep=''))
View(gen_measures)
gens_box_comparisons = c(0, 9)
gen_measures = sqldf(paste("select * from met_measures where generation=", gc, sep=''))
View(gen_measures)
met_measures = measures_averages_gens_1[[met]]
View(met_measures)
gen_measures = sqldf(paste("select * from met_measures where generation=", gc, sep=''))
gc=2
met_measures = measures_averages_gens_1[[met]]
gen_measures = sqldf(paste("select * from met_measures where generation=", gc, sep=''))
View(gen_measures)
all_na = colSums(is.na(measures_averages_gens)) == nrow(measures_averages_gens)
for (i in 1:length(measures_names))
{
#  line plots
# finding values for scaling
max_y =  0
min_y = 10000000
for(a in 1:length(aggregations)){
for(m in 1:length(methods)){
max_value = max(measures_averages_gens[paste(methods[m],'_',measures_names[i],'_', aggregations[a], '_Q75',sep='')], na.rm = TRUE)
min_value = min(measures_averages_gens[paste(methods[m],'_',measures_names[i],'_', aggregations[a], '_Q25',sep='')], na.rm = TRUE)
if(max_value > max_y){ max_y = max_value }
if(min_value < min_y){ min_y = min_value }
}
}
#if (measures_names[i] == 'absolute_size' )  {    max_y = 16}
for(a in 1:length(aggregations)){
graph <- ggplot(data=measures_averages_gens, aes(x=generation))
for(m in 1:length(methods)){
is_all_na = all_na[paste(methods[m],'_',measures_names[i],'_', aggregations[a], '_median', sep='')]
if (is_all_na == FALSE) {
graph = graph + geom_ribbon(aes_string(ymin=paste(methods[m],'_',measures_names[i],'_', aggregations[a],'_Q25',sep=''),
ymax=paste(methods[m],'_',measures_names[i],'_', aggregations[a],'_Q75',sep='') ),
fill=experiments_type_colors[m], alpha=0.2, size=0)
graph = graph + geom_line(aes_q(y = as.name(paste(methods[m],'_',measures_names[i],'_', aggregations[a], '_median', sep='')) ,
colour=paste(methods_labels[m], aggregations[a], sep='_')), size=1)
}
}
if (max_y>0) {
graph = graph + coord_cartesian(ylim = c(min_y, max_y))
}
graph = graph  +  labs(y=measures_labels[i], x="Generation", title="")
graph = graph +   scale_color_manual(values=experiments_type_colors)
graph = graph  + theme(legend.position="bottom" ,  legend.text=element_text(size=25), axis.text=element_text(size=32), axis.title=element_text(size=30),
plot.subtitle=element_text(size=30 ), plot.title=element_text(size=30 ))
ggsave(paste( output_directory,'/',measures_names[i], '_', aggregations[a], '_lines.pdf',  sep=''), graph , device='pdf', height = 10, width = 10)
# creates one box plot per measure, and one extra in case outlier removal is needeed
outliers = c('full', 'filtered')
for (out in outliers)
{
has_outliers = FALSE
for(gc in gens_box_comparisons)
{
all_final_values = data.frame()
for (met in 1:length(methods))
{
met_measures = measures_averages_gens_1[[met]]
gen_measures = sqldf(paste("select * from met_measures where generation=", gc, sep=''))
temp = data.frame( c(gen_measures[paste(methods[met],'_',measures_names[i],'_', aggregations[a], sep='')]))
colnames(temp) <- 'values'
if (out == 'filtered'){
if (!all(is.na(temp$values))){
num_rows_before = nrow(temp)
upperl <- quantile(temp$values)[4] + 1.5*IQR(temp$values)
lowerl <- quantile(temp$values)[2] - 1.5*IQR(temp$values)
temp = temp %>% filter(values <= upperl & values >= lowerl )
if (num_rows_before > nrow(temp)){
has_outliers = TRUE
}
}
}
temp$type = methods_labels[met]
all_final_values = rbind(all_final_values, temp)
}
g1 <-  ggplot(data=all_final_values, aes(x= type , y=values, color=type )) +
geom_boxplot(position = position_dodge(width=0.9),lwd=2,  outlier.size = 4) +
labs( x="Method", y=measures_labels[i], title=str_to_title(aggregations[a]))
g1 = g1 +  scale_color_manual(values=  experiments_type_colors  )
g1 = g1 + theme(legend.position="none" , text = element_text(size=50) ,
plot.title=element_text(size=50),  axis.text=element_text(size=50),
axis.title=element_text(size=55),
axis.text.x = element_text(angle = 20, hjust = 0.9),
plot.margin=margin(t = 0.5, r = 0.5, b = 0.5, l =  1.3, unit = "cm"))+
stat_summary(fun.y = mean, geom="point" ,shape = 16,  size=11)
# in this list, use the desired pairs names from methods_labels
comps = list( methods_labels )
max_y =  0
#if (measures_names[i] == 'absolute_size' )  {    max_y = 16}
if (max_y>0) {
graph = graph + coord_cartesian(ylim = c(min_y, max_y))
}
g1 = g1 + geom_signif( test="wilcox.test", size=1, textsize=18,
comparisons = comps,
map_signif_level=c() )
if (out == 'full' || (out == 'filtered' &&  has_outliers == TRUE) ){
ggsave(paste(output_directory,"/",measures_names[i],"_",gc,"_", aggregations[a],'_', out,"_boxes.pdf",sep = ""), g1, device = "pdf", height=18, width = 10)
}
}
}
}
}
